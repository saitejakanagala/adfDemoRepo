{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adfsaiteja"
		},
		"copydata_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'copydata'"
		},
		"parameterizedsql_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'parameterizedsql'"
		},
		"parameterizedsql2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'parameterizedsql2'",
			"defaultValue": "Integrated Security=False;Data Source=@{linkedService().servername};Initial Catalog=@{linkedService().dbname};User ID=@{linkedService().username};Password=@{linkedService().password}"
		},
		"saitejademoblob_ls_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'saitejademoblob_ls'"
		},
		"trigger_properties_parametrizedpipeline1_parameters_sourcetable": {
			"type": "string",
			"defaultValue": "table1"
		},
		"trigger_properties_parametrizedpipeline1_parameters_dbnamefrompipeline": {
			"type": "string",
			"defaultValue": "dbo"
		},
		"trigger_properties_parametrizedpipeline1_parameters_targettable": {
			"type": "string",
			"defaultValue": "table2"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Exist_df_54')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "existsdataflow_54",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"employees": {},
									"dept": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 32,
								"computeType": "MemoryOptimized"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "saiteja_pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-23T05:10:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/existsdataflow_54')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Foreach_activity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.OutputFolders",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data_foreach",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "copydata_src",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "foreach_ds",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"OutputFolders": {
						"type": "array",
						"defaultValue": [
							"op1",
							"op2",
							"op3"
						]
					}
				},
				"folder": {
					"name": "saiteja_pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-23T05:10:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/copydata_src')]",
				"[concat(variables('factoryId'), '/datasets/foreach_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/aggregaredatafloepipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "totalempbydept",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"employee1src": {},
									"totalempbydept": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 32,
								"computeType": "MemoryOptimized"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "saiteja_pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-23T05:10:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/totalempbydept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/appendvariable_activity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append variable1",
						"type": "AppendVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "listoffiles",
							"value": {
								"value": "@pipeline().parameters.filename",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"filename": {
						"type": "string",
						"defaultValue": "sales.txt"
					}
				},
				"variables": {
					"listoffiles": {
						"type": "Array",
						"defaultValue": [
							"salesuk",
							"salesus"
						]
					}
				},
				"folder": {
					"name": "saiteja_pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-23T05:10:49Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/copydata_activity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data activity",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "copydata_src",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "copydata_tgt",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "saiteja_pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-23T05:10:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/copydata_src')]",
				"[concat(variables('factoryId'), '/datasets/copydata_tgt')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copydata_activity1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "input//addresses.csv"
							},
							{
								"name": "Destination",
								"value": "output//add.csv"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "copydata1_src",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "copydata1_tgt",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "saiteja_pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-23T05:10:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/copydata1_src')]",
				"[concat(variables('factoryId'), '/datasets/copydata1_tgt')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copydata_sample54')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": "employeenew.csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "employee_ds",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "empdeptoutput_ds",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "saiteja_pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-23T05:10:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/employee_ds')]",
				"[concat(variables('factoryId'), '/datasets/empdeptoutput_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_activity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Dataflowactivity",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "empdeptdataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"employeedata": {},
									"departmentdata": {},
									"empdeptdata": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "saiteja_pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-23T05:10:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/empdeptdataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_activity51')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "totalempbydept_copy1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"employee1src": {},
									"department": {},
									"totalempbydept1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 32,
								"computeType": "MemoryOptimized"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "saiteja_pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-23T05:10:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/totalempbydept_copy1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_activity52_conditionalsplit')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "condiotinalsplit_dataflow52",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"allemployee": {},
									"payroll": {},
									"itemployees": {},
									"HR": {},
									"otheremployees": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 32,
								"computeType": "MemoryOptimized"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "saiteja_pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-23T05:10:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/condiotinalsplit_dataflow52')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/delete_activity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "delete",
								"value": "delet2 files from output2"
							}
						],
						"typeProperties": {
							"dataset": {
								"referenceName": "delete_ds",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "copydata",
									"type": "LinkedServiceReference"
								},
								"path": "logs"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"wildcardFileName": "*.csv",
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "saiteja_pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-23T05:10:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/delete_ds')]",
				"[concat(variables('factoryId'), '/linkedServices/copydata')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/executefilterdfpipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "output",
								"value": "succeeded"
							}
						],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Filterpayrollempdataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"empdata": {},
									"emppayrollsink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 32,
								"computeType": "MemoryOptimized"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "saiteja_pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-23T05:10:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Filterpayrollempdataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/executepipeline_activity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "parametrizedpipeline1",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"sourcetable": {
									"value": "@pipeline().parameters.sourcetable",
									"type": "Expression"
								},
								"dbnamefrompipeline": {
									"value": "@pipeline().parameters.dbnamefrompipeline",
									"type": "Expression"
								},
								"targettable": {
									"value": "@pipeline().parameters.targettable",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourcetable": {
						"type": "string"
					},
					"dbnamefrompipeline": {
						"type": "string"
					},
					"targettable": {
						"type": "string"
					}
				},
				"folder": {
					"name": "saiteja_pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-23T05:10:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/parametrizedpipeline1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/filteractivity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Filteracticity",
						"type": "Filter",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.listofarrays",
								"type": "Expression"
							},
							"condition": {
								"value": "@greater(item(),3)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"listofarrays": {
						"type": "array",
						"defaultValue": [
							1,
							2,
							3,
							4,
							5,
							6,
							7
						]
					}
				},
				"folder": {
					"name": "saiteja_pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-23T05:10:49Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ifcondition_activity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@bool(pipeline().parameters.copyofoutput1)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Copy data2",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "copydata_src",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ifactivity_ds",
											"type": "DatasetReference",
											"parameters": {
												"output": {
													"value": "@pipeline().parameters.copy2output",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "copydata_src",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ifactivity_ds",
											"type": "DatasetReference",
											"parameters": {
												"output": {
													"value": "@pipeline().parameters.copy1output",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"copyofoutput1": {
						"type": "string",
						"defaultValue": "true"
					},
					"copy1output": {
						"type": "string",
						"defaultValue": "output"
					},
					"copy2output": {
						"type": "string",
						"defaultValue": "ifactivity_op2"
					}
				},
				"folder": {
					"name": "saiteja_pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-23T05:10:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/copydata_src')]",
				"[concat(variables('factoryId'), '/datasets/ifactivity_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/lkpdataflow_56')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "lookup_dataflow_56",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"employee": {},
									"dept": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 32,
								"computeType": "MemoryOptimized"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "saiteja_pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-23T05:10:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/lookup_dataflow_56')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/newbranch_dataflow_58')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "newbranch_dataflow_58",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"employeeagain": {},
									"department": {},
									"joindeptandemp": {},
									"totalempbydept": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 32,
								"computeType": "MemoryOptimized"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "saiteja_pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-23T05:10:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/newbranch_dataflow_58')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/parametrizedpipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "parameterizeddataset_sql",
								"type": "DatasetReference",
								"parameters": {
									"dbname": {
										"value": "@pipeline().parameters.dbnamefrompipeline",
										"type": "Expression"
									},
									"tables": {
										"value": "@pipeline().parameters.sourcetable",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "parameterizeddataset_sql",
								"type": "DatasetReference",
								"parameters": {
									"dbname": {
										"value": "@pipeline().parameters.dbnamefrompipeline",
										"type": "Expression"
									},
									"tables": {
										"value": "@pipeline().parameters.targettable",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourcetable": {
						"type": "string"
					},
					"dbnamefrompipeline": {
						"type": "string"
					},
					"targettable": {
						"type": "string"
					}
				},
				"folder": {
					"name": "saiteja_pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-23T05:10:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/parameterizeddataset_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_66')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "parameterized_dataflow_66",
								"type": "DataFlowReference",
								"parameters": {
									"depName": {
										"value": "'@{pipeline().parameters.dep}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"employee": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 32,
								"computeType": "MemoryOptimized"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"dep": {
						"type": "string"
					}
				},
				"folder": {
					"name": "saiteja_pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-23T05:10:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/parameterized_dataflow_66')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pivot_dataflow_60')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "pivot_60",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"employeenew": {},
									"sink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 32,
								"computeType": "MemoryOptimized"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "saiteja_pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-23T05:10:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/pivot_60')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/rankdataflow_activity_81')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow_rank",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "rank_dataflow_81",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EMPNEW": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 32,
								"computeType": "MemoryOptimized"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/rank_dataflow_81')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/selecttransformation_dataflow_59')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "selecttransformation_59",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"employee": {},
									"sink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 32,
								"computeType": "MemoryOptimized"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "saiteja_pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-23T05:10:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/selecttransformation_59')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/setvarible_activity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "filetype",
							"value": {
								"value": "@replace(pipeline().parameters.filename,'sales','')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"filename": {
						"type": "string",
						"defaultValue": "dailysales"
					}
				},
				"variables": {
					"filetype": {
						"type": "String"
					},
					"list of file": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "saiteja_pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-23T05:10:49Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sortdataflow_57')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "soterdataflow_57",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"employee": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 32,
								"computeType": "MemoryOptimized"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "saiteja_pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-23T05:10:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/soterdataflow_57')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/surrogatekey_dataflow_62')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "surrogatekey_62",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"employee": {},
									"sink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 32,
								"computeType": "MemoryOptimized"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "saiteja_pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-23T05:10:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/surrogatekey_62')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/union_dataflow_55')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "union_dataflow_activity",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "uniondataflow_55",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"it": {},
									"hr": {},
									"payroll": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 32,
								"computeType": "MemoryOptimized"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "saiteja_pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-23T05:10:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/uniondataflow_55')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/until_activity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Until1",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@bool(variables('fileavailable'))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Metadata1",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "copydata_src",
											"type": "DatasetReference",
											"parameters": {}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "BinaryReadSettings"
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@bool(activity('Get Metadata1').output.exists)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Wait1",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 120
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Set variable1",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "fileavailable",
													"value": true
												}
											}
										]
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Until1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "copydata_src",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "copydata_tgt",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"fileavailable": {
						"type": "Boolean",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "saiteja_pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-23T05:10:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/copydata_src')]",
				"[concat(variables('factoryId'), '/datasets/copydata_tgt')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/webactivity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://dummy.restapiexample.com/api/v1/employees",
							"method": "GET",
							"headers": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "saiteja_pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-23T05:10:49Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/windowtransformation_dataflow_63')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "windowtransformation_63",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EMPNEW": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 32,
								"computeType": "MemoryOptimized"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "saiteja_pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-23T05:10:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/windowtransformation_63')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EMPNEW')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "saitejademoblob_ls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "saiteja_datasets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "EMPNEW.csv",
						"folderPath": "Input",
						"container": "saitejacontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "empid",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "gender",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "salary",
						"type": "String"
					},
					{
						"name": "department",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/saitejademoblob_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copydata1_src')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "copydata",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "saiteja_datasets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "sample.txt",
						"container": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/copydata')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copydata1_tgt')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "copydata",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "saiteja_datasets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "sample.csv",
						"container": "output2"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/copydata')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copydata_src')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "copydata",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "saiteja_datasets"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "ple.txtsam",
						"container": "input"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/copydata')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copydata_tgt')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "copydata",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "saiteja_datasets"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "output"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/copydata')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/delete_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "copydata",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "saiteja_datasets"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "output2"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/copydata')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/deparment_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "saitejademoblob_ls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "saiteja_datasets"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "department.xlsx",
						"folderPath": "Input",
						"container": "saitejacontainer"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "depid",
						"type": "String"
					},
					{
						"name": "depname",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/saitejademoblob_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/empdeptoutput_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "saitejademoblob_ls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "saiteja_datasets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output",
						"container": "saitejacontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/saitejademoblob_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/employee1csv_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "saitejademoblob_ls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "saiteja_datasets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "employee1src_data_preview (1).csv",
						"folderPath": "Input",
						"container": "saitejacontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "empid",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "department",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/saitejademoblob_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/employee_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "saitejademoblob_ls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "saiteja_datasets"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "employee.xlsx",
						"folderPath": "Input",
						"container": "saitejacontainer"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "empid",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "department",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/saitejademoblob_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/employeenew_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "saitejademoblob_ls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "saiteja_datasets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "employeenew.csv",
						"folderPath": "Input",
						"container": "saitejacontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "gender",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "department",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/saitejademoblob_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/foreach_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "copydata",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "saiteja_datasets"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": {
							"value": "@dataset().FolderName",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/copydata')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/hr_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "saitejademoblob_ls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "saiteja_datasets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "HR.csv",
						"folderPath": "Input",
						"container": "saitejacontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "empid",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "department",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/saitejademoblob_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ifactivity_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "copydata",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"output": {
						"type": "string"
					}
				},
				"folder": {
					"name": "saiteja_datasets"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().output",
							"type": "Expression"
						},
						"container": "op1"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/copydata')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/it_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "saitejademoblob_ls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "saiteja_datasets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "itemployees.csv",
						"folderPath": "Input",
						"container": "saitejacontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "empid",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "department",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/saitejademoblob_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/json_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "saitejademoblob_ls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "saiteja_datasets"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "sample json.json",
						"folderPath": "Input",
						"container": "saitejacontainer"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"Actors": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string"
									},
									"age": {
										"type": "integer"
									},
									"Born At": {
										"type": "string"
									},
									"Birthdate": {
										"type": "string"
									},
									"photo": {
										"type": "string"
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/saitejademoblob_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/parameterizeddataset_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "parameterizedsql",
					"type": "LinkedServiceReference",
					"parameters": {
						"dbnname": {
							"value": "@dataset().dbname",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"dbname": {
						"type": "string"
					},
					"tables": {
						"type": "string"
					}
				},
				"folder": {
					"name": "saiteja_datasets"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().tables",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/parameterizedsql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/payroll_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "saitejademoblob_ls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "saiteja_datasets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "payroll.csv",
						"folderPath": "Input",
						"container": "saitejacontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "empid",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "department",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/saitejademoblob_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copydata')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('copydata_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/parameterizedsql')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"dbnname": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('parameterizedsql_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/parameterizedsql2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"servername": {
						"type": "string"
					},
					"dbname": {
						"type": "string"
					},
					"username": {
						"type": "string"
					},
					"password": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('parameterizedsql2_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/saitejademoblob_ls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('saitejademoblob_ls_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "parametrizedpipeline1",
							"type": "PipelineReference"
						},
						"parameters": {
							"sourcetable": "[parameters('trigger_properties_parametrizedpipeline1_parameters_sourcetable')]",
							"dbnamefrompipeline": "[parameters('trigger_properties_parametrizedpipeline1_parameters_dbnamefrompipeline')]",
							"targettable": "[parameters('trigger_properties_parametrizedpipeline1_parameters_targettable')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Month",
						"interval": 1,
						"startTime": "2023-06-01T06:42:00Z",
						"timeZone": "UTC",
						"schedule": {
							"monthDays": [
								1
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/parametrizedpipeline1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Filterpayrollempdataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "saiteja"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "employee_ds",
								"type": "DatasetReference"
							},
							"name": "empdata"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "empdeptoutput_ds",
								"type": "DatasetReference"
							},
							"name": "emppayrollsink"
						}
					],
					"transformations": [
						{
							"name": "filterpayrollemp"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          name as string,",
						"          country as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> empdata",
						"empdata filter(equals(department,'3')) ~> filterpayrollemp",
						"filterpayrollemp sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['payroll.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> emppayrollsink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/employee_ds')]",
				"[concat(variables('factoryId'), '/datasets/empdeptoutput_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/condiotinalsplit_dataflow52')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "saiteja"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "employee_ds",
								"type": "DatasetReference"
							},
							"name": "allemployee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "empdeptoutput_ds",
								"type": "DatasetReference"
							},
							"name": "payroll"
						},
						{
							"dataset": {
								"referenceName": "empdeptoutput_ds",
								"type": "DatasetReference"
							},
							"name": "itemployees"
						},
						{
							"dataset": {
								"referenceName": "empdeptoutput_ds",
								"type": "DatasetReference"
							},
							"name": "HR"
						},
						{
							"dataset": {
								"referenceName": "empdeptoutput_ds",
								"type": "DatasetReference"
							},
							"name": "otheremployees"
						}
					],
					"transformations": [
						{
							"name": "splitBasedOnDept"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          name as string,",
						"          country as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> allemployee",
						"allemployee split(equals(department,'1'),",
						"     equals(department,'2'),",
						"     equals(department,'3'),",
						"     disjoint: false) ~> splitBasedOnDept@(itemployees, HR, Payroll, otheremployees)",
						"splitBasedOnDept@Payroll sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['conditinalsink_payroll.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> payroll",
						"splitBasedOnDept@itemployees sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['conditionalsplit_itemployees.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> itemployees",
						"splitBasedOnDept@HR sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['ConditionalsplitHR.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> HR",
						"splitBasedOnDept@otheremployees sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['conditionalsplitotheremployees.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> otheremployees"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/employee_ds')]",
				"[concat(variables('factoryId'), '/datasets/empdeptoutput_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/empdeptdataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "saiteja"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "employee_ds",
								"type": "DatasetReference"
							},
							"name": "employeedata"
						},
						{
							"dataset": {
								"referenceName": "deparment_ds",
								"type": "DatasetReference"
							},
							"name": "departmentdata"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "empdeptoutput_ds",
								"type": "DatasetReference"
							},
							"name": "empdeptdata"
						}
					],
					"transformations": [
						{
							"name": "joinempdeptdata"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          name as string,",
						"          country as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employeedata",
						"source(output(",
						"          depid as string,",
						"          depname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> departmentdata",
						"employeedata, departmentdata join(department == depid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinempdeptdata",
						"joinempdeptdata sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['empdeptoutput'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          empid,",
						"          name,",
						"          country,",
						"          depname",
						"     ),",
						"     partitionBy('hash', 1)) ~> empdeptdata"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/employee_ds')]",
				"[concat(variables('factoryId'), '/datasets/deparment_ds')]",
				"[concat(variables('factoryId'), '/datasets/empdeptoutput_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/existsdataflow_54')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "saiteja"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "employee1csv_ds",
								"type": "DatasetReference"
							},
							"name": "employees"
						},
						{
							"dataset": {
								"referenceName": "deparment_ds",
								"type": "DatasetReference"
							},
							"name": "dept"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "empdeptoutput_ds",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "exists1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          name as string,",
						"          country as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employees",
						"source(output(",
						"          depid as string,",
						"          depname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> dept",
						"employees, dept exists(department == depid,",
						"     negate:true,",
						"     broadcast: 'auto')~> exists1",
						"exists1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['depdoesn\\'texistsemp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/employee1csv_ds')]",
				"[concat(variables('factoryId'), '/datasets/deparment_ds')]",
				"[concat(variables('factoryId'), '/datasets/empdeptoutput_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/lookup_dataflow_56')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "saiteja"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "employee1csv_ds",
								"type": "DatasetReference"
							},
							"name": "employee"
						},
						{
							"dataset": {
								"referenceName": "deparment_ds",
								"type": "DatasetReference"
							},
							"name": "dept"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "empdeptoutput_ds",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "lkp"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          name as string,",
						"          country as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employee",
						"source(output(",
						"          depid as string,",
						"          depname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> dept",
						"employee, dept lookup(department == depid,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkp",
						"lkp sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['lkpoutput.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/employee1csv_ds')]",
				"[concat(variables('factoryId'), '/datasets/deparment_ds')]",
				"[concat(variables('factoryId'), '/datasets/empdeptoutput_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/newbranch_dataflow_58')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "saiteja"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "employee1csv_ds",
								"type": "DatasetReference"
							},
							"name": "employeeagain"
						},
						{
							"dataset": {
								"referenceName": "deparment_ds",
								"type": "DatasetReference"
							},
							"name": "department"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "empdeptoutput_ds",
								"type": "DatasetReference"
							},
							"name": "joindeptandemp"
						},
						{
							"dataset": {
								"referenceName": "empdeptoutput_ds",
								"type": "DatasetReference"
							},
							"name": "totalempbydept"
						}
					],
					"transformations": [
						{
							"name": "aggregateondept"
						},
						{
							"name": "joinempanddept"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          name as string,",
						"          country as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employeeagain",
						"source(output(",
						"          depid as string,",
						"          depname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> department",
						"employeeagain aggregate(groupBy(department),",
						"     totalemployees = count(empid)) ~> aggregateondept",
						"employeeagain, department join(department == depname,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinempanddept",
						"joinempanddept sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['joinoutput58.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> joindeptandemp",
						"aggregateondept sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['outputtotalempbydept58.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> totalempbydept"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/employee1csv_ds')]",
				"[concat(variables('factoryId'), '/datasets/deparment_ds')]",
				"[concat(variables('factoryId'), '/datasets/empdeptoutput_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/parameterized_dataflow_66')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "saiteja"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EMPNEW",
								"type": "DatasetReference"
							},
							"name": "employee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "empdeptoutput_ds",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter"
						}
					],
					"scriptLines": [
						"parameters{",
						"     depName as string",
						"}",
						"source(output(",
						"          empid as string,",
						"          name as string,",
						"          gender as string,",
						"          country as string,",
						"          salary as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employee",
						"employee filter(department == $depName) ~> filter",
						"filter sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['output66.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EMPNEW')]",
				"[concat(variables('factoryId'), '/datasets/empdeptoutput_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pivot_60')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "saiteja"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "employeenew_ds",
								"type": "DatasetReference"
							},
							"name": "employeenew"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "empdeptoutput_ds",
								"type": "DatasetReference"
							},
							"name": "sink"
						}
					],
					"transformations": [
						{
							"name": "pivot"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          name as string,",
						"          gender as string,",
						"          country as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employeenew",
						"employeenew pivot(groupBy(department),",
						"     pivotBy(gender),",
						"     {count of id } = count(id),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> pivot",
						"pivot sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['pivotoutput_60.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/employeenew_ds')]",
				"[concat(variables('factoryId'), '/datasets/empdeptoutput_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/rank_dataflow_81')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EMPNEW",
								"type": "DatasetReference"
							},
							"name": "EMPNEW"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "empdeptoutput_ds",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "rank"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          name as string,",
						"          gender as string,",
						"          country as string,",
						"          salary as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EMPNEW",
						"EMPNEW rank(asc(salary, true),",
						"     output(rank as long),",
						"     dense: true) ~> rank",
						"rank sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['rankoutput_81.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EMPNEW')]",
				"[concat(variables('factoryId'), '/datasets/empdeptoutput_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/selecttransformation_59')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "saiteja"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "employee1csv_ds",
								"type": "DatasetReference"
							},
							"name": "employee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "empdeptoutput_ds",
								"type": "DatasetReference"
							},
							"name": "sink"
						}
					],
					"transformations": [
						{
							"name": "select"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          name as string,",
						"          country as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employee",
						"employee select(mapColumn(",
						"          emplyee_name = name,",
						"          employee_id = empid,",
						"          emp_country = country,",
						"          emp_department = department",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select",
						"select sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['selecttransformation59.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/employee1csv_ds')]",
				"[concat(variables('factoryId'), '/datasets/empdeptoutput_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/soterdataflow_57')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "saiteja"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "employee1csv_ds",
								"type": "DatasetReference"
							},
							"name": "employee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "empdeptoutput_ds",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "sort1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          name as string,",
						"          country as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employee",
						"employee sort(asc(department, true)) ~> sort1",
						"sort1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['sortouput.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/employee1csv_ds')]",
				"[concat(variables('factoryId'), '/datasets/empdeptoutput_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/surrogatekey_62')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "saiteja"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "employeenew_ds",
								"type": "DatasetReference"
							},
							"name": "employee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "empdeptoutput_ds",
								"type": "DatasetReference"
							},
							"name": "sink"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey"
						},
						{
							"name": "select"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          name as string,",
						"          gender as string,",
						"          country as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employee",
						"employee keyGenerate(output(primarykey as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey",
						"surrogateKey select(mapColumn(",
						"          primarykey,",
						"          id,",
						"          gender,",
						"          country,",
						"          department,",
						"          primarykey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select",
						"select sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['surrogateoutput_62.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/employeenew_ds')]",
				"[concat(variables('factoryId'), '/datasets/empdeptoutput_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/totalempbydept')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "saiteja"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "employee1csv_ds",
								"type": "DatasetReference"
							},
							"name": "employee1src"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "empdeptoutput_ds",
								"type": "DatasetReference"
							},
							"name": "totalempbydept"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          name as string,",
						"          country as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employee1src",
						"employee1src aggregate(groupBy(department),",
						"     totalemployees = count(empid)) ~> aggregate1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['totalempbydept.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          department,",
						"          totalemployees",
						"     ),",
						"     partitionBy('hash', 1)) ~> totalempbydept"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/employee1csv_ds')]",
				"[concat(variables('factoryId'), '/datasets/empdeptoutput_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/totalempbydept_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "saiteja"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "employee1csv_ds",
								"type": "DatasetReference"
							},
							"name": "employee1src"
						},
						{
							"dataset": {
								"referenceName": "deparment_ds",
								"type": "DatasetReference"
							},
							"name": "department"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "empdeptoutput_ds",
								"type": "DatasetReference"
							},
							"name": "totalempbydept1"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "join1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          name as string,",
						"          country as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employee1src",
						"source(output(",
						"          depid as string,",
						"          depname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> department",
						"employee1src aggregate(groupBy(department),",
						"     totalemployees = count(empid)) ~> aggregate1",
						"aggregate1, department join(department == depid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['totalempbydeptlatest.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          depname,",
						"          totalemployees",
						"     ),",
						"     partitionBy('hash', 1)) ~> totalempbydept1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/employee1csv_ds')]",
				"[concat(variables('factoryId'), '/datasets/deparment_ds')]",
				"[concat(variables('factoryId'), '/datasets/empdeptoutput_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/uniondataflow_55')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "saiteja"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "it_ds",
								"type": "DatasetReference"
							},
							"name": "it"
						},
						{
							"dataset": {
								"referenceName": "hr_ds",
								"type": "DatasetReference"
							},
							"name": "hr"
						},
						{
							"dataset": {
								"referenceName": "payroll_ds",
								"type": "DatasetReference"
							},
							"name": "payroll"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "empdeptoutput_ds",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "unionall"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          name as string,",
						"          country as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> it",
						"source(output(",
						"          empid as string,",
						"          name as string,",
						"          country as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> hr",
						"source(output(",
						"          empid as string,",
						"          name as string,",
						"          country as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> payroll",
						"it, hr, payroll union(byName: true)~> unionall",
						"unionall sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['allemployees.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/it_ds')]",
				"[concat(variables('factoryId'), '/datasets/hr_ds')]",
				"[concat(variables('factoryId'), '/datasets/payroll_ds')]",
				"[concat(variables('factoryId'), '/datasets/empdeptoutput_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/windowtransformation_63')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "saiteja"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EMPNEW",
								"type": "DatasetReference"
							},
							"name": "EMPNEW"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "empdeptoutput_ds",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "empdeptoutput_ds",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "windowavg"
						},
						{
							"name": "windowdenserank"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as integer,",
						"          name as string,",
						"          gender as string,",
						"          country as string,",
						"          salary as integer,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EMPNEW",
						"EMPNEW window(over(department),",
						"     asc(salary, true),",
						"     { avg salary} = avg(salary)) ~> windowavg",
						"EMPNEW window(over(department),",
						"     desc(salary, true),",
						"     denserank = denseRank()) ~> windowdenserank",
						"windowavg sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['windowtransformation_avgsalary.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1",
						"windowdenserank sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['windowtransformation_denserank.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EMPNEW')]",
				"[concat(variables('factoryId'), '/datasets/empdeptoutput_ds')]"
			]
		}
	]
}