{
	"name": "condiotinalsplit_dataflow52",
	"properties": {
		"folder": {
			"name": "saiteja"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "employee_ds",
						"type": "DatasetReference"
					},
					"name": "allemployee"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "empdeptoutput_ds",
						"type": "DatasetReference"
					},
					"name": "payroll"
				},
				{
					"dataset": {
						"referenceName": "empdeptoutput_ds",
						"type": "DatasetReference"
					},
					"name": "itemployees"
				},
				{
					"dataset": {
						"referenceName": "empdeptoutput_ds",
						"type": "DatasetReference"
					},
					"name": "HR"
				},
				{
					"dataset": {
						"referenceName": "empdeptoutput_ds",
						"type": "DatasetReference"
					},
					"name": "otheremployees"
				}
			],
			"transformations": [
				{
					"name": "splitBasedOnDept"
				}
			],
			"scriptLines": [
				"source(output(",
				"          empid as string,",
				"          name as string,",
				"          country as string,",
				"          department as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> allemployee",
				"allemployee split(equals(department,'1'),",
				"     equals(department,'2'),",
				"     equals(department,'3'),",
				"     disjoint: false) ~> splitBasedOnDept@(itemployees, HR, Payroll, otheremployees)",
				"splitBasedOnDept@Payroll sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['conditinalsink_payroll.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> payroll",
				"splitBasedOnDept@itemployees sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['conditionalsplit_itemployees.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> itemployees",
				"splitBasedOnDept@HR sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['ConditionalsplitHR.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> HR",
				"splitBasedOnDept@otheremployees sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['conditionalsplitotheremployees.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> otheremployees"
			]
		}
	}
}